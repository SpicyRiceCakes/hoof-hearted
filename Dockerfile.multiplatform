# 🐎 Hoof Hearted - Multi-Platform Container
# Supports: Linux (Asus/Intel), macOS (Intel/Apple Silicon)
# Auto-detects: NVIDIA GPU, AMD GPU, Intel GPU, or CPU-only

# =============================================
# Stage 1: Build Vue.js Frontend (Multi-arch)
# =============================================
FROM --platform=${BUILDPLATFORM} node:18-alpine AS frontend-builder

# Install platform-specific dependencies
RUN apk add --no-cache \
    libc6-compat \
    ca-certificates \
    curl \
    git

WORKDIR /app

# Copy package files first for better caching
COPY src/frontend/package*.json ./

# Install dependencies with platform-specific handling
RUN npm ci --only=production

# Copy frontend source
COPY src/frontend/ .

# Build with platform detection
RUN npm run build

# =============================================
# Stage 2: Multi-Platform Runtime
# =============================================
FROM python:3.11-slim AS production

# Platform arguments
ARG TARGETPLATFORM
ARG BUILDPLATFORM

# Install base system dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    python3-dev \
    build-essential \
    curl \
    nginx \
    supervisor \
    procps \
    psmisc \
    lsof \
    htop \
    pciutils \
    dmidecode \
    hwinfo \
    && rm -rf /var/lib/apt/lists/*

# Install platform-specific GPU monitoring tools
RUN if [ "${TARGETPLATFORM}" = "linux/amd64" ] || [ "${TARGETPLATFORM}" = "linux/arm64" ]; then \
        apt-get update && \
        apt-get install -y mesa-utils intel-gpu-tools && \
        rm -rf /var/lib/apt/lists/*; \
    fi

# Install Python dependencies
WORKDIR /app/backend
COPY src/backend/requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy backend application
COPY src/backend/ .

# Copy built frontend from builder stage
COPY --from=frontend-builder /app/dist /usr/share/nginx/html

# Copy nginx configuration
COPY deploy/nginx/nginx-unraid.conf /etc/nginx/nginx.conf

# Create platform detection script
RUN echo '#!/bin/bash\n\
# Platform and GPU detection script\n\
echo "Platform: ${TARGETPLATFORM:-unknown}"\n\
echo "Architecture: $(uname -m)"\n\
echo "OS: $(uname -s)"\n\
\n\
# Detect GPU types\n\
if command -v nvidia-smi >/dev/null 2>&1; then\n\
    echo "NVIDIA GPU detected"\n\
    export GPU_TYPE="nvidia"\n\
elif lspci | grep -i "vga.*amd\\|vga.*radeon" >/dev/null 2>&1; then\n\
    echo "AMD GPU detected"\n\
    export GPU_TYPE="amd"\n\
elif lspci | grep -i "vga.*intel" >/dev/null 2>&1; then\n\
    echo "Intel GPU detected"\n\
    export GPU_TYPE="intel"\n\
else\n\
    echo "No dedicated GPU detected - CPU monitoring only"\n\
    export GPU_TYPE="none"\n\
fi\n\
\n\
# Set monitoring capabilities\n\
export GPU_MONITORING_ENABLED=true\n\
export SYSTEM_MONITORING_ENABLED=true\n\
export PLATFORM_OPTIMIZED=true\n\
' > /platform-detect.sh && chmod +x /platform-detect.sh

# Create enhanced supervisor configuration
RUN echo '[supervisord]\n\
nodaemon=true\n\
user=root\n\
\n\
[program:nginx]\n\
command=nginx -g "daemon off;"\n\
autostart=true\n\
autorestart=true\n\
stdout_logfile=/var/log/nginx/access.log\n\
stderr_logfile=/var/log/nginx/error.log\n\
\n\
[program:flask]\n\
command=bash -c "source /platform-detect.sh && python app.py"\n\
directory=/app/backend\n\
autostart=true\n\
autorestart=true\n\
environment=FLASK_ENV=production,HOST=0.0.0.0,PORT=5000\n\
stdout_logfile=/var/log/flask.log\n\
stderr_logfile=/var/log/flask.log\n\
' > /etc/supervisor/conf.d/supervisord.conf

# Create enhanced health check with platform awareness
RUN echo '#!/bin/bash\n\
# Multi-platform health check\n\
\n\
# Source platform detection\n\
source /platform-detect.sh\n\
\n\
# Check nginx (frontend)\n\
if ! curl -f http://localhost/ >/dev/null 2>&1; then\n\
    echo "Frontend health check failed"\n\
    exit 1\n\
fi\n\
\n\
# Check Flask backend\n\
if ! curl -f http://localhost:5000/health >/dev/null 2>&1; then\n\
    echo "Backend health check failed"\n\
    exit 1\n\
fi\n\
\n\
# Check API endpoints\n\
if ! curl -f http://localhost:5000/api/status >/dev/null 2>&1; then\n\
    echo "API health check failed"\n\
    exit 1\n\
fi\n\
\n\
echo "All services healthy on ${TARGETPLATFORM:-unknown} with ${GPU_TYPE:-unknown} GPU"\n\
' > /health-check.sh && chmod +x /health-check.sh

# Create startup script with platform optimization
RUN echo '#!/bin/bash\n\
echo "🐎 Hoof Hearted starting on $(uname -s)/$(uname -m)"\n\
\n\
# Run platform detection\n\
source /platform-detect.sh\n\
\n\
# Create data directories\n\
mkdir -p /app/data /app/config\n\
\n\
# Platform-specific optimizations\n\
case "$(uname -s)" in\n\
    Linux*)\n\
        echo "Optimizing for Linux..."\n\
        # Enable all monitoring features\n\
        export ENABLE_PROCESS_MONITORING=true\n\
        export ENABLE_DOCKER_MONITORING=true\n\
        ;;\n\
    Darwin*)\n\
        echo "Optimizing for macOS..."\n\
        # macOS-specific settings\n\
        export ENABLE_PROCESS_MONITORING=true\n\
        export ENABLE_DOCKER_MONITORING=false\n\
        ;;\n\
    *)\n\
        echo "Unknown platform - using defaults"\n\
        ;;\n\
esac\n\
\n\
# Start supervisor\n\
exec /usr/bin/supervisord -c /etc/supervisor/conf.d/supervisord.conf\n\
' > /startup.sh && chmod +x /startup.sh

# Create nginx directories and fix permissions
RUN mkdir -p /var/log/nginx && \
    touch /var/log/flask.log && \
    chmod 755 /var/log/nginx && \
    chmod 644 /var/log/flask.log

# Expose port 80
EXPOSE 80

# Multi-platform environment variables
ENV FLASK_ENV=production \
    NODE_ENV=production \
    DATABASE_URL=sqlite:///app/data/hoof_hearted.db \
    GPU_MONITORING_ENABLED=true \
    SYSTEM_MONITORING_ENABLED=true \
    PLATFORM_OPTIMIZED=true \
    ENABLE_PROCESS_MONITORING=true \
    LOG_LEVEL=INFO \
    DASHBOARD_PORT=80 \
    API_URL=http://localhost:5000 \
    VITE_API_URL=http://localhost:5000

# Create directories for persistence
RUN mkdir -p /app/data /app/config && \
    chown -R root:root /app/data /app/config

# Multi-platform labels
LABEL maintainer="SpicyRiceCakes <contact@spicyricecakes.com>" \
      description="Hoof Hearted - Multi-Platform Home Server Monitoring" \
      version="2.1.0-multiplatform" \
      platforms="linux/amd64,linux/arm64,darwin/amd64,darwin/arm64" \
      gpu-support="nvidia,amd,intel,cpu-only" \
      features="vue-magic-dashboard,real-api-integration,multi-platform,auto-gpu-detection"

# Health check with platform awareness
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD /health-check.sh

# Use startup script for platform optimization
CMD ["/startup.sh"]