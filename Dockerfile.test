# 🐎 Hoof Hearted - Multi-Stage Dockerfile for Testing and Development
# Based on src-brain advanced Docker testing methodology
# Supports both development and production builds with external testing

# =============================================================================
# Base Stage - Common dependencies for all builds
# =============================================================================
FROM node:18-alpine AS frontend-base

# Install system dependencies for potential browser testing
RUN apk add --no-cache \
    libc6-compat \
    ca-certificates \
    fontconfig \
    font-liberation \
    nss \
    wget \
    xdg-utils \
    curl

# Set working directory
WORKDIR /app

# Install frontend dependencies
COPY src/frontend/package*.json ./
RUN npm ci

# =============================================================================
# Frontend Development Stage - Full development environment
# =============================================================================
FROM frontend-base AS frontend-development

# Copy frontend source code
COPY src/frontend/ .

# Environment for development
ENV NODE_ENV=development
ENV VITE_API_URL=http://localhost:5001

# Expose development port (Vue dev server)
EXPOSE 5173

# Start development server
CMD ["npm", "run", "dev", "--", "--host", "0.0.0.0", "--port", "5173"]

# =============================================================================
# Frontend Production Stage - Optimized for deployment
# =============================================================================
FROM frontend-base AS frontend-production

# Copy source code and build
COPY src/frontend/ .
RUN npm run build

# Production Nginx stage
FROM nginx:alpine AS frontend-nginx-production

# Copy built application
COPY --from=frontend-production /app/dist /usr/share/nginx/html

# Create health check endpoint
RUN echo 'server { listen 8080; location /health { return 200 "healthy\n"; add_header Content-Type text/plain; } }' > /etc/nginx/conf.d/health.conf

# Production environment
ENV NODE_ENV=production

# Create non-root user
RUN addgroup --system --gid 1001 nginx-user
RUN adduser --system --uid 1001 --ingroup nginx-user nginx-user

# Expose port
EXPOSE 80

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
  CMD wget --no-verbose --tries=1 --spider http://localhost:8080/health || exit 1

# Start nginx
CMD ["nginx", "-g", "daemon off;"]

# =============================================================================
# Backend Base Stage - Common Python dependencies
# =============================================================================
FROM python:3.11-slim AS backend-base

# Install system dependencies for monitoring and GPU support
RUN apt-get update && apt-get install -y \
    curl \
    procps \
    psmisc \
    lsof \
    htop \
    gcc \
    python3-dev \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Install Python dependencies
COPY src/backend/requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# =============================================================================
# Backend Development Stage - Development environment
# =============================================================================
FROM backend-base AS backend-development

# Copy backend source code
COPY src/backend/ .

# Environment for development
ENV FLASK_ENV=development
ENV FLASK_DEBUG=1

# Expose development port
EXPOSE 5000

# Start development server with auto-reload
CMD ["python", "app.py"]

# =============================================================================
# Backend Production Stage - Optimized for deployment
# =============================================================================
FROM backend-base AS backend-production

# Copy source code
COPY src/backend/ .

# Production environment
ENV FLASK_ENV=production
ENV FLASK_DEBUG=0

# Create non-root user
RUN groupadd --system --gid 1001 hoofhearted
RUN adduser --system --uid 1001 --ingroup hoofhearted hoofhearted

# Set correct permissions
RUN chown -R hoofhearted:hoofhearted /app
USER hoofhearted

# Expose port
EXPOSE 5000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
  CMD curl -f http://localhost:5000/health || exit 1

# Start production server
CMD ["python", "app.py"]